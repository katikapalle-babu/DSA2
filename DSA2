def binarySearch(arr: Array[Int], target: Int): Int = {
  var left = 0
  var right = arr.length - 1

  while (left <= right) {
    val mid = left + (right - left) / 2

    if (arr(mid) == target) {
      return mid
    } else if (arr(mid) < target) {
      left = mid + 1
    } else {
      right = mid - 1
    }
  }

  -1
}

val arr = Array(1, 3, 5, 7, 9, 11)
val target = 5
val result = binarySearch(arr, target)
println(result) // Output: 2


def binarySearchFirstOccurrence(arr: Array[Int], target: Int): Int = {
  var left = 0
  var right = arr.length - 1
  var result = -1

  while (left <= right) {
    val mid = left + (right - left) / 2

    if (arr(mid) == target) {
      result = mid
      right = mid - 1 
    } else if (arr(mid) < target) {
      left = mid + 1
    } else {
      right = mid - 1
    }
  }

  result
}

val arr = Array(1, 3, 3, 3, 5, 7, 9, 11)
val target = 3
val result = binarySearchFirstOccurrence(arr, target)
println(result) // Output: 1

def binarySearchFirstOccurrence(arr: Array[Int], target: Int): Int = {
  var left = 0
  var right = arr.length - 1
  var result = -1

  while (left <= right) {
    val mid = left + (right - left) / 2

    if (arr(mid) == target) {
      result = mid
      right = mid - 1 // Continue searching in the left half for the first occurrence
    } else if (arr(mid) < target) {
      left = mid + 1
    } else {
      right = mid - 1
    }
  }

  result
}

val arr = Array(1, 3, 3, 3, 5, 7, 9, 11)
val target = 3
val result = binarySearchFirstOccurrence(arr, target)
println(result) // Output: 1


